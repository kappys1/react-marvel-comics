{"version":3,"sources":["/home/travis/build/kappys1/react-marvel-comics/src/components/SearchBar/index.scss","/home/travis/build/kappys1/react-marvel-comics/src/theme/_variables.scss","/home/travis/build/kappys1/react-marvel-comics/src/pages/Search/index.scss","/home/travis/build/kappys1/react-marvel-comics/src/theme/mixins/_flexbox.scss","/home/travis/build/kappys1/react-marvel-comics/src/theme/mixins/_animations.scss","/home/travis/build/kappys1/react-marvel-comics/src/theme/mixins/_breakpoints.scss","/home/travis/build/kappys1/react-marvel-comics/src/components/ItemSearchComic/index.scss"],"names":[],"mappings":"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","file":"4.25039630.chunk.css","sourcesContent":["@import '../../theme/mixins/flexbox';\n@import '../../theme/variables';\n\n.SearchBar {\n  margin: 0 auto;\n\n  form {\n    text-align: center;\n  }\n\n  input {\n    width: 100%;\n    background: transparent;\n    border: 0;\n    border-bottom: 2px solid $c-white;\n    color: $c-white;\n    font-size: 1.65rem;\n    padding: 0.4em 0;\n    outline: none;\n\n    &::placeholder {\n      /* Chrome, Firefox, Opera, Safari 10.1+ */\n      color: $c-white;\n      opacity: 1;\n      /* Firefox */\n    }\n  }\n}\n","// color palete\n$c-backgroundgray: #d8d8d8;\n$c-red: #ed2227;\n$c-white: #ffffff;\n$c-black: #000000;\n$c-white: #f4f4f4;\n$c-dark: #35393d;\n$c-gradient-1: linear-gradient(to bottom, $c-white, rgba(237, 34, 39, 0.77));\n$c-gradient-1: linear-gradient(to bottom, $c-white, rgba(237, 34, 39, 0.77));\n\n// Font weights\n$fw-light: 300 !default;\n$fw-regular: 400 !default;\n$fw-semi-bold: 500 !default;\n$fw-bold: 700 !default;\n\n// text-size-base\n$fz-base: 1rem !default; // assuming 16px\n$fz-lg: $fz-base * 1.2 !default; // assuming 16px\n$fz-sm: $fz-base * 0.75 !default; // assuming 16px\n\n// text-size-base\n$fz-h1: $fz-base * 1.5 !default; // 36px\n$fz-h2: $fz-base * 1.3 !default; // 36px\n$fz-label: $fz-base * 1.15 !default; // 24px\n$fz-body: $fz-base * 1.15 !default; // 24px\n\n// $sm-h1: 1.5rem; //24px\n// $sm-h2: 1.1rem; //18px\n// $sm-label: 1.1rem; //18px\n// $sm-body: 1rem; //16px\n","@import '../../theme/mixins/flexbox';\n@import '../../theme/mixins/breakpoints';\n@import '../../theme/mixins/animations';\n@import '../../theme/variables';\n\n.modal {\n  height: 100%;\n}\n\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1040;\n  width: 100vw;\n  height: 100vh;\n  background-color: #000;\n  opacity: 0.85;\n}\n\n.modal-wrapper {\n  position: fixed;\n  padding: 0.5rem;\n  top: 0;\n  left: 0;\n  z-index: 1050;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  outline: 0;\n}\n\n.modal-header {\n  @include flex-content(row, center, flex-end);\n  padding: 1.5rem 1.5rem 0.5rem 1.5rem;\n\n  button {\n    background: transparent;\n    outline: none;\n    border: 0;\n  }\n\n  i {\n    font-size: 3rem;\n    color: white;\n  }\n}\n\n.modal-body {\n  height: 87%;\n\n  .SearchBar {\n    width: 80%;\n    margin-top: 2%;\n    height: 10%;\n  }\n\n  .container-search {\n    width: 80%;\n    height: 90%;\n    overflow: auto;\n    margin: 0 auto;\n    padding: 2%;\n    color: white;\n\n    &::-webkit-scrollbar {\n      display: none;\n      width: none;\n    }\n  }\n\n  .no-content {\n    width: 100%;\n    font-size: $fz-body;\n    @include flex-content(row, center, center);\n  }\n\n  .content-loading {\n    @include flex-content(row, center, center);\n\n    i {\n      font-size: 5rem;\n      margin: 0 auto;\n      @include animation(spin, 3s, linear, infinite);\n    }\n\n    &--small {\n      width: 100%;\n\n      i {\n        font-size: 2rem;\n      }\n    }\n  }\n\n  .ItemSearchComic {\n    margin-bottom: 2em;\n  }\n\n  @include breakpoint(desktop) {\n    .ItemSearchComic {\n      width: 33%;\n    }\n\n    .container-search {\n      height: 80%;\n      display: flex;\n      flex-wrap: wrap;\n    }\n  }\n}\n","// Flexbox Containers\n//\n// The 'flex' value causes an element to generate a block-level flex\n// container box.\n//\n// The 'inline-flex' value causes an element to generate a inline-level\n// flex container box.\n//\n// display: flex | inline-flex\n//\n// http://w3.org/tr/css3-flexbox/#flex-containers\n//\n// (Placeholder selectors for each type, for those who rather @extend)\n\n@mixin flexbox {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -moz-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n%flexbox {\n  @include flexbox;\n}\n\n//----------------------------------\n\n@mixin inline-flex {\n  display: -webkit-inline-box;\n  display: -webkit-inline-flex;\n  display: -moz-inline-flex;\n  display: -ms-inline-flexbox;\n  display: inline-flex;\n}\n\n%inline-flex {\n  @include inline-flex;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Direction\n//\n// The 'flex-direction' property specifies how flex items are placed in\n// the flex container, by setting the direction of the flex container's\n// main axis. This determines the direction that flex items are laid out in.\n//\n// Values: row | row-reverse | column | column-reverse\n// Default: row\n//\n// http://w3.org/tr/css3-flexbox/#flex-direction-property\n\n@mixin flex-direction($value: row) {\n  @if $value == row-reverse {\n    -webkit-box-direction: reverse;\n    -webkit-box-orient: horizontal;\n  } @else if $value == column {\n    -webkit-box-direction: normal;\n    -webkit-box-orient: vertical;\n  } @else if $value == column-reverse {\n    -webkit-box-direction: reverse;\n    -webkit-box-orient: vertical;\n  } @else {\n    -webkit-box-direction: normal;\n    -webkit-box-orient: horizontal;\n  }\n  -webkit-flex-direction: $value;\n  -moz-flex-direction: $value;\n  -ms-flex-direction: $value;\n  flex-direction: $value;\n}\n// Shorter version:\n@mixin flex-dir($args...) {\n  @include flex-direction($args...);\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Wrap\n//\n// The 'flex-wrap' property controls whether the flex container is single-line\n// or multi-line, and the direction of the cross-axis, which determines\n// the direction new lines are stacked in.\n//\n// Values: nowrap | wrap | wrap-reverse\n// Default: nowrap\n//\n// http://w3.org/tr/css3-flexbox/#flex-wrap-property\n\n@mixin flex-wrap($value: nowrap) {\n  // No Webkit Box fallback.\n  -webkit-flex-wrap: $value;\n  -moz-flex-wrap: $value;\n  @if $value == nowrap {\n    -ms-flex-wrap: none;\n  } @else {\n    -ms-flex-wrap: $value;\n  }\n  flex-wrap: $value;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Flow (shorthand)\n//\n// The 'flex-flow' property is a shorthand for setting the 'flex-direction'\n// and 'flex-wrap' properties, which together define the flex container's\n// main and cross axes.\n//\n// Values: <flex-direction> | <flex-wrap>\n// Default: row nowrap\n//\n// http://w3.org/tr/css3-flexbox/#flex-flow-property\n\n@mixin flex-flow(\n  $values: (\n    row nowrap\n  )\n) {\n  // No Webkit Box fallback.\n  -webkit-flex-flow: $values;\n  -moz-flex-flow: $values;\n  -ms-flex-flow: $values;\n  flex-flow: $values;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Order\n//\n// The 'order' property controls the order in which flex items appear within\n// their flex container, by assigning them to ordinal groups.\n//\n// Default: 0\n//\n// http://w3.org/tr/css3-flexbox/#order-property\n\n@mixin order($int: 0) {\n  -webkit-box-ordinal-group: $int + 1;\n  -webkit-order: $int;\n  -moz-order: $int;\n  -ms-flex-order: $int;\n  order: $int;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Grow\n//\n// The 'flex-grow' property sets the flex grow factor. Negative numbers\n// are invalid.\n//\n// Default: 0\n//\n// http://w3.org/tr/css3-flexbox/#flex-grow-property\n\n@mixin flex-grow($int: 0) {\n  -webkit-box-flex: $int;\n  -webkit-flex-grow: $int;\n  -moz-flex-grow: $int;\n  -ms-flex-positive: $int;\n  flex-grow: $int;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Shrink\n//\n// The 'flex-shrink' property sets the flex shrink factor. Negative numbers\n// are invalid.\n//\n// Default: 1\n//\n// http://w3.org/tr/css3-flexbox/#flex-shrink-property\n\n@mixin flex-shrink($int: 1) {\n  -webkit-flex-shrink: $int;\n  -moz-flex-shrink: $int;\n  -ms-flex-negative: $int;\n  flex-shrink: $int;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Basis\n//\n// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.\n//\n// Values: Like \"width\"\n// Default: auto\n//\n// http://www.w3.org/TR/css3-flexbox/#flex-basis-property\n\n@mixin flex-basis($value: auto) {\n  -webkit-flex-basis: $value;\n  -moz-flex-basis: $value;\n  -ms-flex-preferred-size: $value;\n  flex-basis: $value;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox \"Flex\" (shorthand)\n//\n// The 'flex' property specifies the components of a flexible length: the\n// flex grow factor and flex shrink factor, and the flex basis. When an\n// element is a flex item, 'flex' is consulted instead of the main size\n// property to determine the main size of the element. If an element is\n// not a flex item, 'flex' has no effect.\n//\n// Values: none | <flex-grow> <flex-shrink> || <flex-basis>\n// Default: See individual properties (1 1 0).\n//\n// http://w3.org/tr/css3-flexbox/#flex-property\n\n@mixin flex($fg: 1, $fs: null, $fb: null) {\n  // Set a variable to be used by box-flex properties\n  $fg-boxflex: $fg;\n\n  // Box-Flex only supports a flex-grow value so let's grab the\n  // first item in the list and just return that.\n  @if type-of($fg) == 'list' {\n    $fg-boxflex: nth($fg, 1);\n  }\n\n  -webkit-box-flex: $fg-boxflex;\n  -webkit-flex: $fg $fs $fb;\n  -moz-box-flex: $fg-boxflex;\n  -moz-flex: $fg $fs $fb;\n  -ms-flex: $fg $fs $fb;\n  flex: $fg $fs $fb;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Justify Content\n//\n// The 'justify-content' property aligns flex items along the main axis\n// of the current line of the flex container. This is done after any flexible\n// lengths and any auto margins have been resolved. Typically it helps distribute\n// extra free space leftover when either all the flex items on a line are\n// inflexible, or are flexible but have reached their maximum size. It also\n// exerts some control over the alignment of items when they overflow the line.\n//\n// Note: 'space-*' values not supported in older syntaxes.\n//\n// Values: flex-start | flex-end | center | space-between | space-around\n// Default: flex-start\n//\n// http://w3.org/tr/css3-flexbox/#justify-content-property\n\n@mixin justify-content($value: flex-start) {\n  @if $value == flex-start {\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n  } @else if $value == flex-end {\n    -webkit-box-pack: end;\n    -ms-flex-pack: end;\n  } @else if $value == space-between {\n    -webkit-box-pack: justify;\n    -ms-flex-pack: justify;\n  } @else if $value == space-around {\n    -ms-flex-pack: distribute;\n  } @else {\n    -webkit-box-pack: $value;\n    -ms-flex-pack: $value;\n  }\n  -webkit-justify-content: $value;\n  -moz-justify-content: $value;\n  justify-content: $value;\n}\n// Shorter version:\n@mixin flex-just($args...) {\n  @include justify-content($args...);\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Align Items\n//\n// Flex items can be aligned in the cross axis of the current line of the\n// flex container, similar to 'justify-content' but in the perpendicular\n// direction. 'align-items' sets the default alignment for all of the flex\n// container's items, including anonymous flex items. 'align-self' allows\n// this default alignment to be overridden for individual flex items. (For\n// anonymous flex items, 'align-self' always matches the value of 'align-items'\n// on their associated flex container.)\n//\n// Values: flex-start | flex-end | center | baseline | stretch\n// Default: stretch\n//\n// http://w3.org/tr/css3-flexbox/#align-items-property\n\n@mixin align-items($value: stretch) {\n  @if $value == flex-start {\n    -webkit-box-align: start;\n    -ms-flex-align: start;\n  } @else if $value == flex-end {\n    -webkit-box-align: end;\n    -ms-flex-align: end;\n  } @else {\n    -webkit-box-align: $value;\n    -ms-flex-align: $value;\n  }\n  -webkit-align-items: $value;\n  -moz-align-items: $value;\n  align-items: $value;\n}\n\n//----------------------------------\n\n// Flexbox Align Self\n//\n// Values: auto | flex-start | flex-end | center | baseline | stretch\n// Default: auto\n\n@mixin align-self($value: auto) {\n  // No Webkit Box Fallback.\n  -webkit-align-self: $value;\n  -moz-align-self: $value;\n  @if $value == flex-start {\n    -ms-flex-item-align: start;\n  } @else if $value == flex-end {\n    -ms-flex-item-align: end;\n  } @else {\n    -ms-flex-item-align: $value;\n  }\n  align-self: $value;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Align Content\n//\n// The 'align-content' property aligns a flex container's lines within the\n// flex container when there is extra space in the cross-axis, similar to\n// how 'justify-content' aligns individual items within the main-axis. Note,\n// this property has no effect when the flexbox has only a single line.\n//\n// Values: flex-start | flex-end | center | space-between | space-around | stretch\n// Default: stretch\n//\n// http://w3.org/tr/css3-flexbox/#align-content-property\n\n@mixin align-content($value: stretch) {\n  // No Webkit Box Fallback.\n  -webkit-align-content: $value;\n  -moz-align-content: $value;\n  @if $value == flex-start {\n    -ms-flex-line-pack: start;\n  } @else if $value == flex-end {\n    -ms-flex-line-pack: end;\n  } @else {\n    -ms-flex-line-pack: $value;\n  }\n  align-content: $value;\n}\n\n// helpers function flex.\n@mixin flex-initial($direction: row) {\n  @include flexbox();\n  @include flex-flow($direction nowrap);\n}\n\n@mixin flex-content($direction: row, $topPosition: flex-start, $leftPosition: flex-start) {\n  @include flex-initial($direction);\n  @include justify-content($leftPosition);\n  @include align-items($topPosition);\n  @include align-content(center);\n}\n\n.flex-row-center-center-content {\n  @include flex-content(row, center, center);\n}\n\n.flex-row-center-start-content {\n  @include flex-content(row, center, flex-start);\n}\n.flex-row-center-end-content {\n  @include flex-content(row, center, flex-end);\n}\n.flex-row-start-start-content {\n  @include flex-content(row, flex-start, flex-start);\n}\n.flex-row-start-center-content {\n  @include flex-content(row, flex-start, center);\n}\n.flex-row-start-end-content {\n  @include flex-content(row, flex-start, flex-end);\n}\n.flex-row-end-start-content {\n  @include flex-content(row, flex-end, flex-start);\n}\n.flex-row-end-end-content {\n  @include flex-content(row, flex-end, flex-end);\n}\n.flex-colum-center-center-content {\n  @include flex-content(column, center, center);\n}\n.flex-colum-center-start-content {\n  @include flex-content(column, center, flex-start);\n}\n.flex-column-start-center-content {\n  @include flex-content(column, flex-start, center);\n}\n","@mixin animation(\n  $animation,\n  $duration: 0.5s,\n  $timing-function: ease-in-out,\n  $repeat: 1,\n  $delay: 0s\n) {\n  -webkit-animation: $animation $duration $timing-function $repeat $delay;\n  -moz-animation: $animation $duration $timing-function $repeat $delay;\n  -o-animation: $animation $duration $timing-function $repeat $delay;\n  animation: $animation $duration $timing-function $repeat $delay;\n}\n\n@mixin keyframes($name) {\n  @-webkit-keyframes #{$name} {\n    @content;\n  }\n  @-moz-keyframes #{$name} {\n    @content;\n  }\n  @-o-keyframes #{$name} {\n    @content;\n  }\n  @keyframes #{$name} {\n    @content;\n  }\n}\n","@mixin breakpoint($point) {\n  @if $point==large {\n    @media (min-width: 90em) {\n      @content;\n    }\n  } @else if $point==desktop {\n    @media (min-width: 70em) {\n      @content;\n    }\n  } @else if $point==laptop {\n    @media (min-width: 64em) {\n      @content;\n    }\n  } @else if $point==tablet {\n    @media (min-width: 50em) {\n      @content;\n    }\n  } @else if $point==phablet {\n    @media (min-width: 37.5em) {\n      @content;\n    }\n  } @else if $point==mobileonly {\n    @media (max-width: 37.5em) {\n      @content;\n    }\n  }\n}\n","@import '../../theme/mixins/flexbox';\n@import '../../theme/mixins/breakpoints';\n\n.ItemSearchComic {\n  width: 100%;\n  @include flex-content(row, flex-start, center);\n\n  &__image {\n    width: 100%;\n    max-width: 80px;\n    box-shadow: 6px 6px 20px 0 #000000;\n  }\n\n  &__description {\n    flex-grow: 1;\n    padding: 1rem;\n    @include flex-content(column, flex-start, flex-start);\n  }\n\n  h1 {\n    margin-top: 0.7em;\n    display: block;\n    /* or inline-block */\n    text-overflow: ellipsis;\n    word-wrap: break-word;\n    overflow: hidden;\n    max-height: 1.2 * 2em;\n  }\n\n  @include breakpoint(desktop) {\n    &__image {\n      box-shadow: 6px 6px 20px 0 #000000;\n    }\n  }\n}\n"]}