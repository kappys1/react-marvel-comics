{"version":3,"sources":["/home/travis/build/kappys1/react-marvel-comics/src/theme/mixins/_flexbox.scss","/home/travis/build/kappys1/react-marvel-comics/src/pages/Detail/index.scss","/home/travis/build/kappys1/react-marvel-comics/src/theme/mixins/_breakpoints.scss"],"names":[],"mappings":"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","file":"4.aae87e4b.chunk.css","sourcesContent":["// Flexbox Containers\n//\n// The 'flex' value causes an element to generate a block-level flex\n// container box.\n//\n// The 'inline-flex' value causes an element to generate a inline-level\n// flex container box.\n//\n// display: flex | inline-flex\n//\n// http://w3.org/tr/css3-flexbox/#flex-containers\n//\n// (Placeholder selectors for each type, for those who rather @extend)\n\n@mixin flexbox {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -moz-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n%flexbox {\n  @include flexbox;\n}\n\n//----------------------------------\n\n@mixin inline-flex {\n  display: -webkit-inline-box;\n  display: -webkit-inline-flex;\n  display: -moz-inline-flex;\n  display: -ms-inline-flexbox;\n  display: inline-flex;\n}\n\n%inline-flex {\n  @include inline-flex;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Direction\n//\n// The 'flex-direction' property specifies how flex items are placed in\n// the flex container, by setting the direction of the flex container's\n// main axis. This determines the direction that flex items are laid out in.\n//\n// Values: row | row-reverse | column | column-reverse\n// Default: row\n//\n// http://w3.org/tr/css3-flexbox/#flex-direction-property\n\n@mixin flex-direction($value: row) {\n  @if $value == row-reverse {\n    -webkit-box-direction: reverse;\n    -webkit-box-orient: horizontal;\n  } @else if $value == column {\n    -webkit-box-direction: normal;\n    -webkit-box-orient: vertical;\n  } @else if $value == column-reverse {\n    -webkit-box-direction: reverse;\n    -webkit-box-orient: vertical;\n  } @else {\n    -webkit-box-direction: normal;\n    -webkit-box-orient: horizontal;\n  }\n  -webkit-flex-direction: $value;\n  -moz-flex-direction: $value;\n  -ms-flex-direction: $value;\n  flex-direction: $value;\n}\n// Shorter version:\n@mixin flex-dir($args...) {\n  @include flex-direction($args...);\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Wrap\n//\n// The 'flex-wrap' property controls whether the flex container is single-line\n// or multi-line, and the direction of the cross-axis, which determines\n// the direction new lines are stacked in.\n//\n// Values: nowrap | wrap | wrap-reverse\n// Default: nowrap\n//\n// http://w3.org/tr/css3-flexbox/#flex-wrap-property\n\n@mixin flex-wrap($value: nowrap) {\n  // No Webkit Box fallback.\n  -webkit-flex-wrap: $value;\n  -moz-flex-wrap: $value;\n  @if $value == nowrap {\n    -ms-flex-wrap: none;\n  } @else {\n    -ms-flex-wrap: $value;\n  }\n  flex-wrap: $value;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Flow (shorthand)\n//\n// The 'flex-flow' property is a shorthand for setting the 'flex-direction'\n// and 'flex-wrap' properties, which together define the flex container's\n// main and cross axes.\n//\n// Values: <flex-direction> | <flex-wrap>\n// Default: row nowrap\n//\n// http://w3.org/tr/css3-flexbox/#flex-flow-property\n\n@mixin flex-flow(\n  $values: (\n    row nowrap\n  )\n) {\n  // No Webkit Box fallback.\n  -webkit-flex-flow: $values;\n  -moz-flex-flow: $values;\n  -ms-flex-flow: $values;\n  flex-flow: $values;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Order\n//\n// The 'order' property controls the order in which flex items appear within\n// their flex container, by assigning them to ordinal groups.\n//\n// Default: 0\n//\n// http://w3.org/tr/css3-flexbox/#order-property\n\n@mixin order($int: 0) {\n  -webkit-box-ordinal-group: $int + 1;\n  -webkit-order: $int;\n  -moz-order: $int;\n  -ms-flex-order: $int;\n  order: $int;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Grow\n//\n// The 'flex-grow' property sets the flex grow factor. Negative numbers\n// are invalid.\n//\n// Default: 0\n//\n// http://w3.org/tr/css3-flexbox/#flex-grow-property\n\n@mixin flex-grow($int: 0) {\n  -webkit-box-flex: $int;\n  -webkit-flex-grow: $int;\n  -moz-flex-grow: $int;\n  -ms-flex-positive: $int;\n  flex-grow: $int;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Shrink\n//\n// The 'flex-shrink' property sets the flex shrink factor. Negative numbers\n// are invalid.\n//\n// Default: 1\n//\n// http://w3.org/tr/css3-flexbox/#flex-shrink-property\n\n@mixin flex-shrink($int: 1) {\n  -webkit-flex-shrink: $int;\n  -moz-flex-shrink: $int;\n  -ms-flex-negative: $int;\n  flex-shrink: $int;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Basis\n//\n// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.\n//\n// Values: Like \"width\"\n// Default: auto\n//\n// http://www.w3.org/TR/css3-flexbox/#flex-basis-property\n\n@mixin flex-basis($value: auto) {\n  -webkit-flex-basis: $value;\n  -moz-flex-basis: $value;\n  -ms-flex-preferred-size: $value;\n  flex-basis: $value;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox \"Flex\" (shorthand)\n//\n// The 'flex' property specifies the components of a flexible length: the\n// flex grow factor and flex shrink factor, and the flex basis. When an\n// element is a flex item, 'flex' is consulted instead of the main size\n// property to determine the main size of the element. If an element is\n// not a flex item, 'flex' has no effect.\n//\n// Values: none | <flex-grow> <flex-shrink> || <flex-basis>\n// Default: See individual properties (1 1 0).\n//\n// http://w3.org/tr/css3-flexbox/#flex-property\n\n@mixin flex($fg: 1, $fs: null, $fb: null) {\n  // Set a variable to be used by box-flex properties\n  $fg-boxflex: $fg;\n\n  // Box-Flex only supports a flex-grow value so let's grab the\n  // first item in the list and just return that.\n  @if type-of($fg) == 'list' {\n    $fg-boxflex: nth($fg, 1);\n  }\n\n  -webkit-box-flex: $fg-boxflex;\n  -webkit-flex: $fg $fs $fb;\n  -moz-box-flex: $fg-boxflex;\n  -moz-flex: $fg $fs $fb;\n  -ms-flex: $fg $fs $fb;\n  flex: $fg $fs $fb;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Justify Content\n//\n// The 'justify-content' property aligns flex items along the main axis\n// of the current line of the flex container. This is done after any flexible\n// lengths and any auto margins have been resolved. Typically it helps distribute\n// extra free space leftover when either all the flex items on a line are\n// inflexible, or are flexible but have reached their maximum size. It also\n// exerts some control over the alignment of items when they overflow the line.\n//\n// Note: 'space-*' values not supported in older syntaxes.\n//\n// Values: flex-start | flex-end | center | space-between | space-around\n// Default: flex-start\n//\n// http://w3.org/tr/css3-flexbox/#justify-content-property\n\n@mixin justify-content($value: flex-start) {\n  @if $value == flex-start {\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n  } @else if $value == flex-end {\n    -webkit-box-pack: end;\n    -ms-flex-pack: end;\n  } @else if $value == space-between {\n    -webkit-box-pack: justify;\n    -ms-flex-pack: justify;\n  } @else if $value == space-around {\n    -ms-flex-pack: distribute;\n  } @else {\n    -webkit-box-pack: $value;\n    -ms-flex-pack: $value;\n  }\n  -webkit-justify-content: $value;\n  -moz-justify-content: $value;\n  justify-content: $value;\n}\n// Shorter version:\n@mixin flex-just($args...) {\n  @include justify-content($args...);\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Align Items\n//\n// Flex items can be aligned in the cross axis of the current line of the\n// flex container, similar to 'justify-content' but in the perpendicular\n// direction. 'align-items' sets the default alignment for all of the flex\n// container's items, including anonymous flex items. 'align-self' allows\n// this default alignment to be overridden for individual flex items. (For\n// anonymous flex items, 'align-self' always matches the value of 'align-items'\n// on their associated flex container.)\n//\n// Values: flex-start | flex-end | center | baseline | stretch\n// Default: stretch\n//\n// http://w3.org/tr/css3-flexbox/#align-items-property\n\n@mixin align-items($value: stretch) {\n  @if $value == flex-start {\n    -webkit-box-align: start;\n    -ms-flex-align: start;\n  } @else if $value == flex-end {\n    -webkit-box-align: end;\n    -ms-flex-align: end;\n  } @else {\n    -webkit-box-align: $value;\n    -ms-flex-align: $value;\n  }\n  -webkit-align-items: $value;\n  -moz-align-items: $value;\n  align-items: $value;\n}\n\n//----------------------------------\n\n// Flexbox Align Self\n//\n// Values: auto | flex-start | flex-end | center | baseline | stretch\n// Default: auto\n\n@mixin align-self($value: auto) {\n  // No Webkit Box Fallback.\n  -webkit-align-self: $value;\n  -moz-align-self: $value;\n  @if $value == flex-start {\n    -ms-flex-item-align: start;\n  } @else if $value == flex-end {\n    -ms-flex-item-align: end;\n  } @else {\n    -ms-flex-item-align: $value;\n  }\n  align-self: $value;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Align Content\n//\n// The 'align-content' property aligns a flex container's lines within the\n// flex container when there is extra space in the cross-axis, similar to\n// how 'justify-content' aligns individual items within the main-axis. Note,\n// this property has no effect when the flexbox has only a single line.\n//\n// Values: flex-start | flex-end | center | space-between | space-around | stretch\n// Default: stretch\n//\n// http://w3.org/tr/css3-flexbox/#align-content-property\n\n@mixin align-content($value: stretch) {\n  // No Webkit Box Fallback.\n  -webkit-align-content: $value;\n  -moz-align-content: $value;\n  @if $value == flex-start {\n    -ms-flex-line-pack: start;\n  } @else if $value == flex-end {\n    -ms-flex-line-pack: end;\n  } @else {\n    -ms-flex-line-pack: $value;\n  }\n  align-content: $value;\n}\n\n// helpers function flex.\n@mixin flex-initial($direction: row) {\n  @include flexbox();\n  @include flex-flow($direction nowrap);\n}\n\n@mixin flex-content($direction: row, $topPosition: flex-start, $leftPosition: flex-start) {\n  @include flex-initial($direction);\n  @include justify-content($leftPosition);\n  @include align-items($topPosition);\n  @include align-content(center);\n}\n\n.flex-row-center-center-content {\n  @include flex-content(row, center, center);\n}\n\n.flex-row-center-start-content {\n  @include flex-content(row, center, flex-start);\n}\n.flex-row-center-end-content {\n  @include flex-content(row, center, flex-end);\n}\n.flex-row-start-start-content {\n  @include flex-content(row, flex-start, flex-start);\n}\n.flex-row-start-center-content {\n  @include flex-content(row, flex-start, center);\n}\n.flex-row-start-end-content {\n  @include flex-content(row, flex-start, flex-end);\n}\n.flex-row-end-start-content {\n  @include flex-content(row, flex-end, flex-start);\n}\n.flex-row-end-end-content {\n  @include flex-content(row, flex-end, flex-end);\n}\n.flex-colum-center-center-content {\n  @include flex-content(column, center, center);\n}\n.flex-colum-center-start-content {\n  @include flex-content(column, center, flex-start);\n}\n.flex-column-start-center-content {\n  @include flex-content(column, flex-start, center);\n}\n","@import '../../theme/mixins/flexbox';\n@import '../../theme/mixins/breakpoints';\n\n.Detail-page {\n  position: relative;\n  box-sizing: border-box;\n  padding: 5em 2em 0px 40px;\n  height: 87%;\n  @include flex-content(row, flex-start, flex-start);\n  align-content: flex-start;\n  @include flex-wrap(wrap);\n\n  .content-left {\n    width: 100%;\n    transition: width 0.3s ease-out;\n  }\n\n  .ItemComic {\n    .text-body,\n    h1 {\n      display: none;\n    }\n  }\n\n  .content-right {\n    width: 0%;\n    padding: 0 2em;\n    box-sizing: border-box;\n    opacity: 0;\n    transition: opacity 0.3s ease-in-out;\n    transition-delay: 0.2s;\n    @include flex-content(column, flex-start, space-between);\n\n    .content-body {\n      display: none;\n    }\n  }\n\n  .content-body {\n    margin-top: 4%;\n    max-height: 70%;\n    overflow: auto;\n    opacity: 0;\n    transition: opacity 0.3s ease-in-out;\n    transition-delay: 0.2s;\n    @include flex-content(column, flex-start, flex-start);\n\n    .label {\n      text-transform: capitalize;\n      margin-bottom: 0.5em;\n    }\n\n    .content-creators {\n      margin: 1em 0;\n      @include flex-content(row, flex-start, flex-start);\n      @include flex-wrap(wrap);\n\n      .creator {\n        margin-right: 2em;\n        margin-bottom: 1em;\n      }\n    }\n  }\n\n  &.animate {\n    .content-left {\n      width: 33%;\n    }\n\n    .content-right {\n      width: 66%;\n    }\n\n    .content-body,\n    .content-right {\n      opacity: 1;\n    }\n  }\n\n  @include breakpoint(desktop) {\n    padding: 2em 2em 0px 70px;\n    @include flex-wrap(nowrap);\n\n    .content-body {\n      display: none;\n      width: 100%;\n    }\n\n    .content-right {\n      width: 100%;\n\n      h1 {\n        width: 70%;\n      }\n\n      height: 86%;\n      @include flex-content(row, flex-start, space-between);\n      align-content: flex-start;\n      @include flex-wrap(wrap);\n\n      .content-body {\n        display: block;\n      }\n    }\n\n    &.animate {\n      .content-left {\n        width: 31%;\n      }\n\n      .content-right {\n        width: 100%;\n      }\n    }\n  }\n}\n","@mixin breakpoint($point) {\n  @if $point==large {\n    @media (min-width: 90em) {\n      @content;\n    }\n  } @else if $point==desktop {\n    @media (min-width: 70em) {\n      @content;\n    }\n  } @else if $point==laptop {\n    @media (min-width: 64em) {\n      @content;\n    }\n  } @else if $point==tablet {\n    @media (min-width: 50em) {\n      @content;\n    }\n  } @else if $point==phablet {\n    @media (min-width: 37.5em) {\n      @content;\n    }\n  } @else if $point==mobileonly {\n    @media (max-width: 37.5em) {\n      @content;\n    }\n  }\n}\n"]}